_#There are three types of variables in Solidity_

1. Local: Declared inside a function and not stored on the chain
2. State: Declared outside a function to maintain global state within the contract
3. Global: Provides information about the chain. Injected by EVM during runtime and are not declared by the contract author

_#Components of Solidity_

_@Keywords::_
* Contract
* Library
* Pragma
* Modifier

_@Identifiers::_
Identifiers are unique names given to entities such as variables, functions, contracts and other user-defined items
Identifiers help in uniquely naming and accessing these entities within the scope of the program

_@Rules for Identifiers:_
1. Alphabet and digits: a-z, A-Z, 0-9, _
2. Start with letter or underscore
3. Case sensitive
4. No reserved keywords

_@Literals_
Literals is a data type which you define in your smart contracts
Literals are fixed values directly written into code
These are constant values and are not represented by variables or expressions
Solidity supports: integer, boolean, string, hexadecimal, and address literals

__Integer literals__
uint256 decimalNumber = 42;
uint256 hexNumber = 0x2A; // 42 in hexadecimal

#_uint_
an abbreviation for 'uint256' stands for unsigned integer 256 bits
an unsigned integer is a non-negative whole number
the range of uint256 is from 0 to 2power256 - 1

uint256 positiveNumber = 123;
uint positiveNumberShorthand = 123; // This is the same as uint256


#_int_ 
it is an abbreviation for int256 which stands for signed integers of 256 bits
a signed integer can be a positive or negative whole number

int256 number = -123;
int numberShorthand = -123; // This is the same as int256


__Boolean Literals__
bool flag = true;

__String Literals__
string greeting = "Hello, Solidity!";

__Hexadecimal Literals:__
bytes data = hex"00112233";

__Address Literals__
address recipient = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835Cb2;

_@Punctuations_
{}
==
=

__SOLIDITY FEATURES__
_Syntax_
_File extension .sol_
_Applications_
_Contracts_
_Data types_
_Contract deployment_
_Solidity compiler_
_Easy to learn_
_Smart contracts_
_DEXes_

Solidity can be used to create contracts for various purposes which includes:
1. Voting
2. Crowd Funding
3. Building Auction
4. Multi Signature Wallets
5. NFT Market Places

#For writing smart contracts, you follow the OOP structure


__CONTRACT DEPLOYMENT__
Any contract you write in solidity program, you can deploy it on ETH blockchain, or polygon blockchain

__SOLIDITY COMPILER__
solc, for short is a tool that translates Solidity source code into bytecode that can be executed on EVM.

It generates the Application Binary Interface, used to interact with smart contracts
It also checks for errors
it optimizes the code in order to reduce the size of the generated bytecode, and improve execution efficiency


__SMART CONTRACTS__
Initial Coin Offering -ICO
DAO - Decentralized Autonomouse Organizations
DEX - Decentralized Exchange


We are going to use Remix IDE

__INITIALIZING SMART CONTRACTS__
pragma solidity ^0.8.19; 

contract HelloWorld {

}

__Variables and Types in Solidity__
Variables
- Local: declared inside a function, not stored on blockchain
- State: declared outside a function to maintain global state within the contract, it is also stored on chain
- Global: provides information about the chain. Injected by the EVM during runtime and are not declared by the contract author. global variables include things like: transaction sender, block hash, timestamp, etc

__SETTING UP__

<!-- define the compiler version you would be using -->
pragma solidity ^0.8.19

<!-- start by creating a contract named variable -->

contract HowToDeclareVariables {
    state variables
    public means the variable can be accessed internally by the contract and can also be read by the external wolrd
    uint8 public u8 = 10
    unsigned integer means non negative integeers

    int public i = -123
    negative numbers are allowed for int types

    address stands for an ethereum address
    address public addr = 0xCA******************

    bool public defaultBool = false
    bool stands for boolean

    default values of variables
    bool public defBool = false
    unint public defUint = 0
    int public defInt = 0
    address defaultAddr = 0x0000000000000000000000000000000000000000


    function doSOmething() {

        unint ui = 456
        int = -90

        unint timestamp = block.timestamp
        address sender = msg.sender

    }

}

__FUNCTIONS, LOOPS, CONDITIONALS in SMART CONTRACTS__
contract Conditions {
    unint public _num

    function Set(uint num) {
        _num = num
    }

    a view function doesn't change the state of any variable
    view functions in solidity do not require gas
    function get() public view returns (unit) {
        return _num
    }
}







Link to course
https://www.youtube.com/watch?v=dTzoKx4f6P8&list=PLWUCKsxdKl0oksYr6IG_wRsaSUySQC0ck&index=3

https://www.youtube.com/watch?v=aqxAWLi6UMA&list=PL1mpOEiTOZnZ59xbumr8_QnIAU8eKmb